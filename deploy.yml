AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  CustomApiDomainZoneId:
    Type: String
    Default: ''
    Description: The Route 53 Zone ID that will be used to create the A record referred
      to in the "custom_domain" parameter
  CustomApiDomain:
    Type: String
    Default: ''
    Description: The domain name for which an A record pointing to the CloudFront
      distribution will be created in Route53
  FrontendCloudFormationStackName:
    Type: String
    Description: The CloudFront stack name for the previously created static frontend
      website
Conditions:
  CustomApiDomainSpecified:
    Fn::Not:
    - Fn::Equals:
      - Ref: CustomApiDomain
      - ''
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
        - AllowedOrigins:
          - Fn::Join:
            - ''
            - - https://
              - Fn::ImportValue:
                  Fn::Sub: ${FrontendCloudFormationStackName}:CDNWebsiteDomain
          AllowedMethods:
          - GET
          AllowedHeaders:
          - '*'
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment:
          Ref: S3Bucket
  S3BucketPolicyOriginAccessIdentity:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: S3Bucket
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            AWS:
              Fn::Sub: arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity
                ${CloudFrontOriginAccessIdentity}
          Action: s3:GetObject
          Resource:
            Fn::Sub: ${S3Bucket.Arn}/*
  DynamoDBTableCompanies:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
      - AttributeName: Name
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: Name
        AttributeType: S
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  DynamoDBTableContacts:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
      - AttributeName: CompanyName
        KeyType: HASH
      - AttributeName: EmailAddress
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: CompanyName
        AttributeType: S
      - AttributeName: EmailAddress
        AttributeType: S
  DynamoDBTableVotes:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
      - AttributeName: CompanyName
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: CompanyName
        AttributeType: S
      - AttributeName: Votes
        AttributeType: N
      GlobalSecondaryIndexes:
      - IndexName: Votes-Index
        KeySchema:
        - AttributeName: Votes
          KeyType: HASH
        Projection:
          ProjectionType: ALL
  LambdaDynamoDBCompaniesStream:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: s3://aaronbrighton-cf-resources/1ba608436f840be1e63d7597f6d0a007
      Events:
        DynamoDBCompaniesStream:
          Type: DynamoDB
          Properties:
            StartingPosition: TRIM_HORIZON
            Stream:
              Fn::GetAtt:
              - DynamoDBTableCompanies
              - StreamArn
            MaximumBatchingWindowInSeconds: 5
      Environment:
        Variables:
          CompaniesStaticDumpS3Bucket:
            Ref: S3Bucket
      Policies:
      - Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - s3:PutObject
          - s3:GetObject
          - dynamodb:GetShardIterator
          - dynamodb:DescribeStream
          - dynamodb:GetRecords
          Resource:
          - Fn::GetAtt:
            - DynamoDBTableCompanies
            - StreamArn
          - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: S3Bucket
              - /companies.json
        - Effect: Allow
          Action: dynamodb:ListStreams
          Resource: '*'
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}ApiGateway
      EndpointConfiguration:
        Types:
        - REGIONAL
  ApiGatewayResourceCompanies:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: ApiGatewayRestApi
      ParentId:
        Fn::GetAtt:
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: companies
  ApiGatewayResourceContacts:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: ApiGatewayRestApi
      ParentId:
        Fn::GetAtt:
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: contacts
  ApiGatewayResourceVotes:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: ApiGatewayRestApi
      ParentId:
        Fn::GetAtt:
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: votes
  IAMRoleApiGatewayDynamoDBIntegration:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
      Policies:
      - PolicyName: DynamoDBIntegration
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            Resource:
            - Fn::GetAtt:
              - DynamoDBTableCompanies
              - Arn
            - Fn::GetAtt:
              - DynamoDBTableContacts
              - Arn
            - Fn::GetAtt:
              - DynamoDBTableVotes
              - Arn
  ApiGatewayMethodPutCompanies:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      AuthorizationType: NONE
      ResourceId:
        Ref: ApiGatewayResourceCompanies
      RestApiId:
        Ref: ApiGatewayRestApi
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        RequestTemplates:
          application/json:
            Fn::Sub: "{ \n    \"TableName\": \"${DynamoDBTableCompanies}\",\n    \"\
              Item\": {\n        \"Name\": {\n            \"S\": \"$input.path('$.name')\"\
              \n        }\n    }\n}\n"
        Credentials:
          Fn::GetAtt:
          - IAMRoleApiGatewayDynamoDBIntegration
          - Arn
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem
        IntegrationResponses:
        - StatusCode: 200
          ResponseTemplates:
            application/json: ''
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin:
              Fn::Join:
              - ''
              - - '''https://'
                - Fn::ImportValue:
                    Fn::Sub: ${FrontendCloudFormationStackName}:CDNWebsiteDomain
                - ''''
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: false
  ApiGatewayMethodOptionsCompanies:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ResourceId:
        Ref: ApiGatewayResourceCompanies
      RestApiId:
        Ref: ApiGatewayRestApi
      Integration:
        Type: MOCK
        IntegrationResponses:
        - StatusCode: 200
          ResponseTemplates:
            application/json: ''
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''*'''
            method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT'''
            method.response.header.Access-Control-Allow-Origin:
              Fn::Join:
              - ''
              - - '''https://'
                - Fn::ImportValue:
                    Fn::Sub: ${FrontendCloudFormationStackName}:CDNWebsiteDomain
                - ''''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  ApiGatewayMethodPutContacts:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      AuthorizationType: NONE
      ResourceId:
        Ref: ApiGatewayResourceContacts
      RestApiId:
        Ref: ApiGatewayRestApi
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        RequestTemplates:
          application/json:
            Fn::Sub: "{ \n    \"TableName\": \"${DynamoDBTableCompanies}\",\n    \"\
              Item\": {\n        \"CompanyName\": {\n            \"S\": \"$input.path('$.company_name')\"\
              \n        },\n        \"Name\": {\n            \"S\": \"$input.path('$.name')\"\
              \n        },\n        \"EmailAddress\": {\n            \"S\": \"$input.path('$.email_address')\"\
              \n        }\n    }\n}\n"
        Credentials:
          Fn::GetAtt:
          - IAMRoleApiGatewayDynamoDBIntegration
          - Arn
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem
        IntegrationResponses:
        - StatusCode: 200
          ResponseTemplates:
            application/json: ''
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin:
              Fn::Join:
              - ''
              - - '''https://'
                - Fn::ImportValue:
                    Fn::Sub: ${FrontendCloudFormationStackName}:CDNWebsiteDomain
                - ''''
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: false
  ApiGatewayMethodOptionsContacts:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ResourceId:
        Ref: ApiGatewayResourceContacts
      RestApiId:
        Ref: ApiGatewayRestApi
      Integration:
        Type: MOCK
        IntegrationResponses:
        - StatusCode: 200
          ResponseTemplates:
            application/json: ''
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''*'''
            method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT'''
            method.response.header.Access-Control-Allow-Origin:
              Fn::Join:
              - ''
              - - '''https://'
                - Fn::ImportValue:
                    Fn::Sub: ${FrontendCloudFormationStackName}:CDNWebsiteDomain
                - ''''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  ApiGatewayMethodPutVotes:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      AuthorizationType: NONE
      ResourceId:
        Ref: ApiGatewayResourceVotes
      RestApiId:
        Ref: ApiGatewayRestApi
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        RequestTemplates:
          application/json:
            Fn::Sub: "{\n    \"ConditionExpression\": \"attribute_not_exists(CompanyName)\"\
              ,\n    \"TableName\": \"${DynamoDBTableVotes}\",\n    \"Item\": {\n\
              \        \"CompanyName\": {\n            \"S\": \"$input.path('$.company_name')\"\
              \n        },\n        \"Votes\": {\n            \"N\": \"1\"\n     \
              \   },\n#if($input.path('$.vote_wfh') == 1)\n        \"VoteWFH\": {\n\
              \            \"N\": \"1\"\n        },\n#else\n        \"VoteWFH\": {\n\
              \            \"N\": \"0\"\n        },\n#end\n#if($input.path('$.vote_mix')\
              \ == 1)\n        \"VoteMix\": {\n            \"N\": \"1\"\n        },\n\
              #else\n        \"VoteMix\": {\n            \"N\": \"0\"\n        },\n\
              #end\n#if($input.path('$.vote_office') == 1)\n        \"VoteOffice\"\
              : {\n            \"N\": \"1\"\n        }\n#else\n        \"VoteOffice\"\
              : {\n            \"N\": \"0\"\n        }\n#end\n    }\n}\n"
        Credentials:
          Fn::GetAtt:
          - IAMRoleApiGatewayDynamoDBIntegration
          - Arn
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem
        IntegrationResponses:
        - StatusCode: 200
          ResponseTemplates:
            application/json: ''
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin:
              Fn::Join:
              - ''
              - - '''https://'
                - Fn::ImportValue:
                    Fn::Sub: ${FrontendCloudFormationStackName}:CDNWebsiteDomain
                - ''''
        - StatusCode: 400
          ResponseTemplates:
            application/json: ''
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin:
              Fn::Join:
              - ''
              - - '''https://'
                - Fn::ImportValue:
                    Fn::Sub: ${FrontendCloudFormationStackName}:CDNWebsiteDomain
                - ''''
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: false
      - StatusCode: 400
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: false
  ApiGatewayMethodPostVotes:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      AuthorizationType: NONE
      ResourceId:
        Ref: ApiGatewayResourceVotes
      RestApiId:
        Ref: ApiGatewayRestApi
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        RequestTemplates:
          application/json:
            Fn::Sub: "{ \n    \"TableName\": \"${DynamoDBTableVotes}\",\n    \"Key\"\
              : {\n        \"CompanyName\": {\n            \"S\": \"$input.path('$.company_name')\"\
              \n        }\n    },\n#if($input.path('$.vote_wfh') == 1)\n    \"UpdateExpression\"\
              : \"ADD Votes :num, VoteWFH :num\",\n#elseif($input.path('$.vote_mix')\
              \ == 1)\n    \"UpdateExpression\": \"ADD Votes :num, VoteMix :num\"\
              ,\n#elseif($input.path('$.vote_office') == 1)\n    \"UpdateExpression\"\
              : \"ADD Votes :num, VoteOffice :num\",\n#end    \n    \"ExpressionAttributeValues\"\
              : {\n        \":num\": {\"N\": \"1\"}\n    },\n    \"ReturnValues\"\
              : \"ALL_NEW\"\n}\n"
        Credentials:
          Fn::GetAtt:
          - IAMRoleApiGatewayDynamoDBIntegration
          - Arn
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem
        IntegrationResponses:
        - StatusCode: 200
          ResponseTemplates:
            application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"company_name\"\
              : \"$inputRoot.Attributes.CompanyName.S\",\n    \"vote_wfh\": $inputRoot.Attributes.VoteWFH.N,\n\
              \    \"vote_mix\": $inputRoot.Attributes.VoteMix.N,\n    \"vote_office\"\
              : $inputRoot.Attributes.VoteOffice.N,\n    \"votes\": $inputRoot.Attributes.Votes.N\n\
              }\n"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin:
              Fn::Join:
              - ''
              - - '''https://'
                - Fn::ImportValue:
                    Fn::Sub: ${FrontendCloudFormationStackName}:CDNWebsiteDomain
                - ''''
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: false
  ApiGatewayMethodOptionsVotes:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ResourceId:
        Ref: ApiGatewayResourceVotes
      RestApiId:
        Ref: ApiGatewayRestApi
      Integration:
        Type: MOCK
        IntegrationResponses:
        - StatusCode: 200
          ResponseTemplates:
            application/json: ''
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''*'''
            method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST,PUT'''
            method.response.header.Access-Control-Allow-Origin:
              Fn::Join:
              - ''
              - - '''https://'
                - Fn::ImportValue:
                    Fn::Sub: ${FrontendCloudFormationStackName}:CDNWebsiteDomain
                - ''''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - ApiGatewayMethodPutCompanies
    - ApiGatewayMethodPutContacts
    - ApiGatewayMethodPutVotes
    - ApiGatewayMethodPostVotes
    - ApiGatewayMethodOptionsCompanies
    - ApiGatewayMethodOptionsContacts
    - ApiGatewayMethodOptionsVotes
    Properties:
      RestApiId:
        Ref: ApiGatewayRestApi
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId:
        Ref: ApiGatewayRestApi
      DeploymentId:
        Ref: ApiGatewayDeployment
      StageName: api
  ACMCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: CustomApiDomainSpecified
    Properties:
      DomainName:
        Ref: CustomApiDomain
      SubjectAlternativeNames:
      - Fn::Sub: www.${CustomApiDomain}
      ValidationMethod: DNS
      DomainValidationOptions:
      - DomainName:
          Ref: CustomApiDomain
        HostedZoneId:
          Ref: CustomApiDomainZoneId
      - DomainName:
          Fn::Sub: www.${CustomApiDomain}
        HostedZoneId:
          Ref: CustomApiDomainZoneId
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases:
          Fn::If:
          - CustomApiDomainSpecified
          - - Ref: CustomApiDomain
            - Fn::Sub: www.${CustomApiDomain}
          - Ref: AWS::NoValue
        HttpVersion: http2
        DefaultCacheBehavior:
          TargetOriginId:
            Fn::Sub: S3-${S3Bucket}
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
        Origins:
        - DomainName:
            Fn::GetAtt:
            - S3Bucket
            - RegionalDomainName
          Id:
            Fn::Sub: S3-${S3Bucket}
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Sub: origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        - DomainName:
            Fn::Sub: ${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com
          Id:
            Fn::Sub: API-${ApiGatewayRestApi}
          CustomOriginConfig:
            OriginProtocolPolicy: https-only
        CacheBehaviors:
        - PathPattern: api/*
          TargetOriginId:
            Fn::Sub: API-${ApiGatewayRestApi}
          ViewerProtocolPolicy: https-only
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          - PUT
          - PATCH
          - POST
          - DELETE
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
        ViewerCertificate:
          Fn::If:
          - CustomApiDomainSpecified
          - AcmCertificateArn:
              Ref: ACMCertificate
            MinimumProtocolVersion: TLSv1.2_2019
            SslSupportMethod: sni-only
          - CloudFrontDefaultCertificate: true
  Route53BaseRecord:
    Type: AWS::Route53::RecordSet
    Condition: CustomApiDomainSpecified
    Properties:
      HostedZoneId:
        Ref: CustomApiDomainZoneId
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - CloudFrontDistribution
          - DomainName
        HostedZoneId: Z2FDTNDATAQYW2
      Name:
        Ref: CustomApiDomain
      Type: A
  Route53WWWRecord:
    Type: AWS::Route53::RecordSet
    Condition: CustomApiDomainSpecified
    Properties:
      HostedZoneId:
        Ref: CustomApiDomainZoneId
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - CloudFrontDistribution
          - DomainName
        HostedZoneId: Z2FDTNDATAQYW2
      Name:
        Fn::Sub: www.${CustomApiDomain}
      Type: A
Outputs:
  CloudFrontDistribution:
    Description: CDN enabled API Endpoint URL to access the API directly or from the
      frontend website
    Value:
      Fn::If:
      - CustomApiDomainSpecified
      - Fn::Sub: https://${CustomApiDomain}/api
      - Fn::Sub: https://${CloudFrontDistribution.DomainName}/api
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}:CDNApiDomain
