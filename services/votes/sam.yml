AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  CustomApiDomainZoneId:
    Type: String
    Default: ''
    Description: 'The Route 53 Zone ID that will be used to create the A record referred to in the "custom_domain" parameter'
  CustomApiDomain:
    Type: String
    Default: ''
    Description: The domain name for which an A record pointing to the CloudFront distribution will be created in Route53
  FrontendCloudFormationStackName:
    Type: String
    Description: The CloudFront stack name for the previously created static frontend website
Conditions:
  CustomApiDomainSpecified: !Not [ !Equals [ !Ref CustomApiDomain, '' ] ] # Was a custom api domain parameter provided
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - !Join ['', ["https://", Fn::ImportValue: !Sub '${FrontendCloudFormationStackName}:CDNWebsiteDomain']]
            AllowedMethods:
              - GET
            AllowedHeaders:
              - '*'
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref S3Bucket
  S3BucketPolicyOriginAccessIdentity:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}'
            Action: s3:GetObject
            Resource: !Sub '${S3Bucket.Arn}/*'
  DynamoDBTableCompanies:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: Name
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST # We want the table to auto-scale
      AttributeDefinitions:
        - AttributeName: Name
          AttributeType: S
      StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
  DynamoDBTableContacts:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: CompanyName
          KeyType: HASH
        - AttributeName: EmailAddress
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST # We want the table to auto-scale
      AttributeDefinitions:
        - AttributeName: CompanyName
          AttributeType: S
        - AttributeName: EmailAddress
          AttributeType: S
  DynamoDBTableVotes:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: CompanyName
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST # We want the table to auto-scale
      AttributeDefinitions:
        - AttributeName: CompanyName
          AttributeType: S
        - AttributeName: Votes
          AttributeType: N
      GlobalSecondaryIndexes:
        - IndexName: Votes-Index # A customizable index name, no functional use or relationship
          KeySchema:
            - AttributeName: Votes
              KeyType: HASH
          Projection:
            ProjectionType: ALL
  LambdaDynamoDBCompaniesStream:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: stream-companies-lambda
      Events:
        DynamoDBCompaniesStream:
          Type: DynamoDB
          Properties:
            StartingPosition: TRIM_HORIZON # Process all records (in-case the DynamoDB already has company records)
            Stream: !GetAtt DynamoDBTableCompanies.StreamArn
            MaximumBatchingWindowInSeconds: 5 # Will queue company records for up to 5 seconds before invoking function
      Environment:
        Variables:
          CompaniesStaticDumpS3Bucket: !Ref S3Bucket
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - dynamodb:GetShardIterator
                - dynamodb:DescribeStream
                - dynamodb:GetRecords
              Resource: 
                - !GetAtt DynamoDBTableCompanies.StreamArn
                - !Join ['', ['arn:aws:s3:::', !Ref S3Bucket, '/companies.json']]
            - Effect: Allow
              Action: dynamodb:ListStreams
              Resource: '*'
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}ApiGateway' # Required, despite documentation's claims of optionality
      EndpointConfiguration:
        Types:
          - REGIONAL
  ApiGatewayResourceCompanies:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: companies
  ApiGatewayResourceContacts:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: contacts
  ApiGatewayResourceVotes:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: votes
  IAMRoleApiGatewayDynamoDBIntegration:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
      Policies: 
        - PolicyName: DynamoDBIntegration
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt DynamoDBTableCompanies.Arn
                  - !GetAtt DynamoDBTableContacts.Arn
                  - !GetAtt DynamoDBTableVotes.Arn
  ApiGatewayMethodPutCompanies:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      AuthorizationType: NONE # Required, despite documentation's claims of optionality
      ResourceId: !Ref ApiGatewayResourceCompanies
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        RequestTemplates:
          'application/json': !Sub |
            { 
                "TableName": "${DynamoDBTableCompanies}",
                "Item": {
                    "Name": {
                        "S": "$input.path('$.name')"
                    }
                }
            }
        Credentials: !GetAtt IAMRoleApiGatewayDynamoDBIntegration.Arn
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Join ['', ["'https://", Fn::ImportValue: !Sub '${FrontendCloudFormationStackName}:CDNWebsiteDomain', "'"]]
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
  ApiGatewayMethodOptionsCompanies:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE # Required, despite documentation's claims of optionality
      ResourceId: !Ref ApiGatewayResourceCompanies
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Origin: !Join ['', ["'https://", Fn::ImportValue: !Sub '${FrontendCloudFormationStackName}:CDNWebsiteDomain', "'"]]
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  ApiGatewayMethodPutContacts:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      AuthorizationType: NONE # Required, despite documentation's claims of optionality
      ResourceId: !Ref ApiGatewayResourceContacts
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        RequestTemplates:
          'application/json': !Sub |
            { 
                "TableName": "${DynamoDBTableCompanies}",
                "Item": {
                    "CompanyName": {
                        "S": "$input.path('$.company_name')"
                    },
                    "Name": {
                        "S": "$input.path('$.name')"
                    },
                    "EmailAddress": {
                        "S": "$input.path('$.email_address')"
                    }
                }
            }
        Credentials: !GetAtt IAMRoleApiGatewayDynamoDBIntegration.Arn
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Join ['', ["'https://", Fn::ImportValue: !Sub '${FrontendCloudFormationStackName}:CDNWebsiteDomain', "'"]]
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
  ApiGatewayMethodOptionsContacts:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE # Required, despite documentation's claims of optionality
      ResourceId: !Ref ApiGatewayResourceContacts
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Origin: !Join ['', ["'https://", Fn::ImportValue: !Sub '${FrontendCloudFormationStackName}:CDNWebsiteDomain', "'"]]
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  ApiGatewayMethodPutVotes:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      AuthorizationType: NONE # Required, despite documentation's claims of optionality
      ResourceId: !Ref ApiGatewayResourceVotes
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        RequestTemplates:
          'application/json': !Sub |
            {
                "ConditionExpression": "attribute_not_exists(CompanyName)",
                "TableName": "${DynamoDBTableVotes}",
                "Item": {
                    "CompanyName": {
                        "S": "$input.path('$.company_name')"
                    },
                    "Votes": {
                        "N": "1"
                    },
            #if($input.path('$.vote_wfh') == 1)
                    "VoteWFH": {
                        "N": "1"
                    },
            #else
                    "VoteWFH": {
                        "N": "0"
                    },
            #end
            #if($input.path('$.vote_mix') == 1)
                    "VoteMix": {
                        "N": "1"
                    },
            #else
                    "VoteMix": {
                        "N": "0"
                    },
            #end
            #if($input.path('$.vote_office') == 1)
                    "VoteOffice": {
                        "N": "1"
                    }
            #else
                    "VoteOffice": {
                        "N": "0"
                    }
            #end
                }
            }
        Credentials: !GetAtt IAMRoleApiGatewayDynamoDBIntegration.Arn
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem'
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: 200
            ResponseTemplates:
              application/json: ''
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Join ['', ["'https://", Fn::ImportValue: !Sub '${FrontendCloudFormationStackName}:CDNWebsiteDomain', "'"]]
          - StatusCode: 400
            SelectionPattern: 400
            ResponseTemplates:
              application/json: ''
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Join ['', ["'https://", Fn::ImportValue: !Sub '${FrontendCloudFormationStackName}:CDNWebsiteDomain', "'"]]
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
        - StatusCode: 400
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
  ApiGatewayMethodPostVotes:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      AuthorizationType: NONE # Required, despite documentation's claims of optionality
      ResourceId: !Ref ApiGatewayResourceVotes
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        RequestTemplates:
          'application/json': !Sub |
            { 
                "TableName": "${DynamoDBTableVotes}",
                "Key": {
                    "CompanyName": {
                        "S": "$input.path('$.company_name')"
                    }
                },
            #if($input.path('$.vote_wfh') == 1)
                "UpdateExpression": "ADD Votes :num, VoteWFH :num",
            #elseif($input.path('$.vote_mix') == 1)
                "UpdateExpression": "ADD Votes :num, VoteMix :num",
            #elseif($input.path('$.vote_office') == 1)
                "UpdateExpression": "ADD Votes :num, VoteOffice :num",
            #end    
                "ExpressionAttributeValues": {
                    ":num": {"N": "1"}
                },
                "ReturnValues": "ALL_NEW"
            }
        Credentials: !GetAtt IAMRoleApiGatewayDynamoDBIntegration.Arn
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                {
                    "company_name": "$inputRoot.Attributes.CompanyName.S",
                    "vote_wfh": $inputRoot.Attributes.VoteWFH.N,
                    "vote_mix": $inputRoot.Attributes.VoteMix.N,
                    "vote_office": $inputRoot.Attributes.VoteOffice.N,
                    "votes": $inputRoot.Attributes.Votes.N
                }
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Join ['', ["'https://", Fn::ImportValue: !Sub '${FrontendCloudFormationStackName}:CDNWebsiteDomain', "'"]]
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
  ApiGatewayMethodOptionsVotes:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE # Required, despite documentation's claims of optionality
      ResourceId: !Ref ApiGatewayResourceVotes
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: !Join ['', ["'https://", Fn::ImportValue: !Sub '${FrontendCloudFormationStackName}:CDNWebsiteDomain', "'"]]
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethodPutCompanies
      - ApiGatewayMethodPutContacts
      - ApiGatewayMethodPutVotes
      - ApiGatewayMethodPostVotes
      - ApiGatewayMethodOptionsCompanies
      - ApiGatewayMethodOptionsContacts
      - ApiGatewayMethodOptionsVotes
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      DeploymentId: !Ref ApiGatewayDeployment
      StageName: api
  ACMCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: CustomApiDomainSpecified # Only create certificate if CustomApiDomain provided
    Properties:
      DomainName: !Ref CustomApiDomain
      SubjectAlternativeNames: 
        - !Sub 'www.${CustomApiDomain}'
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref CustomApiDomain
          HostedZoneId: !Ref CustomApiDomainZoneId
        - DomainName: !Sub 'www.${CustomApiDomain}'
          HostedZoneId: !Ref CustomApiDomainZoneId
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases: !If [ CustomApiDomainSpecified, [ !Ref CustomApiDomain, !Sub 'www.${CustomApiDomain}' ], !Ref AWS::NoValue ] # Specify aliases only if a CustomApiDomain was specified
        HttpVersion: http2 # Maximum HTTP version that you want viewers to use
        DefaultCacheBehavior:
          TargetOriginId: !Sub 'S3-${S3Bucket}'
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed-CachingDisabled
        Origins:
          - DomainName: !GetAtt S3Bucket.RegionalDomainName
            Id: !Sub 'S3-${S3Bucket}'
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
          - DomainName: !Sub '${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com'
            Id: !Sub 'API-${ApiGatewayRestApi}'
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        CacheBehaviors:
          - PathPattern: 'api/*'
            TargetOriginId: !Sub 'API-${ApiGatewayRestApi}'
            ViewerProtocolPolicy: https-only
            AllowedMethods: # Only have three options, GET+HEAD, GET+HEAD+OPTIONS, or ALL as seen below.
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed-CachingDisabled
        ViewerCertificate: # Specify the certificate generated in ACM only if a CustomApiDomain was specified
          !If
            - CustomApiDomainSpecified
            - AcmCertificateArn: !Ref ACMCertificate
              MinimumProtocolVersion: TLSv1.2_2019 # Required when selecting custom certificate
              SslSupportMethod: sni-only # Required when selecting custom certificate
            - CloudFrontDefaultCertificate: true
  Route53BaseRecord:
    Type: AWS::Route53::RecordSet
    Condition: CustomApiDomainSpecified # Only create certificate if CustomApiDomain provided
    Properties:
      HostedZoneId: !Ref CustomApiDomainZoneId
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # Specific ID used for specialized A-Record based alias pointers for CloudFront 
      Name: !Ref CustomApiDomain
      Type: A
  Route53WWWRecord:
    Type: AWS::Route53::RecordSet
    Condition: CustomApiDomainSpecified # Only create certificate if CustomApiDomain provided
    Properties:
      HostedZoneId: !Ref CustomApiDomainZoneId
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # Specific ID used for specialized A-Record based alias pointers for CloudFront 
      Name: !Sub 'www.${CustomApiDomain}'
      Type: A
Outputs:
  CloudFrontDistribution: 
    Description: CDN enabled API Endpoint URL to access the API directly or from the frontend website
    Value: 
      !If
        - CustomApiDomainSpecified
        - !Sub 'https://${CustomApiDomain}/api'
        - !Sub 'https://${CloudFrontDistribution.DomainName}/api'
    Export:
      Name: !Sub '${AWS::StackName}:CDNApiDomain' # Used to cross-reference across CloudFormation stacks
  ApiGatewayId:
    Description: API Gateway resource ID
    Value: !Ref ApiGatewayRestApi
    Export:
      Name: !Sub '${AWS::StackName}:ApiGatewayId'